// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		Category:        newCategory(db),
		OrderDetail:     newOrderDetail(db),
		Ordertab:        newOrdertab(db),
		Product:         newProduct(db),
		ProductCategory: newProductCategory(db),
		User:            newUser(db),
	}
}

type Query struct {
	db *gorm.DB

	Category        category
	OrderDetail     orderDetail
	Ordertab        ordertab
	Product         product
	ProductCategory productCategory
	User            user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		Category:        q.Category.clone(db),
		OrderDetail:     q.OrderDetail.clone(db),
		Ordertab:        q.Ordertab.clone(db),
		Product:         q.Product.clone(db),
		ProductCategory: q.ProductCategory.clone(db),
		User:            q.User.clone(db),
	}
}

type queryCtx struct {
	Category        *categoryDo
	OrderDetail     *orderDetailDo
	Ordertab        *ordertabDo
	Product         *productDo
	ProductCategory *productCategoryDo
	User            *userDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Category:        q.Category.WithContext(ctx),
		OrderDetail:     q.OrderDetail.WithContext(ctx),
		Ordertab:        q.Ordertab.WithContext(ctx),
		Product:         q.Product.WithContext(ctx),
		ProductCategory: q.ProductCategory.WithContext(ctx),
		User:            q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
