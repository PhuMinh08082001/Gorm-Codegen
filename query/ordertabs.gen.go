// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm/model"
)

func newOrdertab(db *gorm.DB) ordertab {
	_ordertab := ordertab{}

	_ordertab.ordertabDo.UseDB(db)
	_ordertab.ordertabDo.UseModel(&model.Ordertab{})

	tableName := _ordertab.ordertabDo.TableName()
	_ordertab.ALL = field.NewField(tableName, "*")
	_ordertab.OrderID = field.NewInt64(tableName, "order_id")
	_ordertab.UserID = field.NewInt64(tableName, "user_id")

	_ordertab.fillFieldMap()

	return _ordertab
}

type ordertab struct {
	ordertabDo ordertabDo

	ALL     field.Field
	OrderID field.Int64
	UserID  field.Int64

	fieldMap map[string]field.Expr
}

func (o ordertab) Table(newTableName string) *ordertab {
	o.ordertabDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o ordertab) As(alias string) *ordertab {
	o.ordertabDo.DO = *(o.ordertabDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *ordertab) updateTableName(table string) *ordertab {
	o.ALL = field.NewField(table, "*")
	o.OrderID = field.NewInt64(table, "order_id")
	o.UserID = field.NewInt64(table, "user_id")

	o.fillFieldMap()

	return o
}

func (o *ordertab) WithContext(ctx context.Context) *ordertabDo { return o.ordertabDo.WithContext(ctx) }

func (o ordertab) TableName() string { return o.ordertabDo.TableName() }

func (o ordertab) Alias() string { return o.ordertabDo.Alias() }

func (o *ordertab) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *ordertab) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 2)
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["user_id"] = o.UserID
}

func (o ordertab) clone(db *gorm.DB) ordertab {
	o.ordertabDo.ReplaceDB(db)
	return o
}

type ordertabDo struct{ gen.DO }

func (o ordertabDo) Debug() *ordertabDo {
	return o.withDO(o.DO.Debug())
}

func (o ordertabDo) WithContext(ctx context.Context) *ordertabDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o ordertabDo) ReadDB() *ordertabDo {
	return o.Clauses(dbresolver.Read)
}

func (o ordertabDo) WriteDB() *ordertabDo {
	return o.Clauses(dbresolver.Write)
}

func (o ordertabDo) Clauses(conds ...clause.Expression) *ordertabDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o ordertabDo) Returning(value interface{}, columns ...string) *ordertabDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o ordertabDo) Not(conds ...gen.Condition) *ordertabDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o ordertabDo) Or(conds ...gen.Condition) *ordertabDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o ordertabDo) Select(conds ...field.Expr) *ordertabDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o ordertabDo) Where(conds ...gen.Condition) *ordertabDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o ordertabDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *ordertabDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o ordertabDo) Order(conds ...field.Expr) *ordertabDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o ordertabDo) Distinct(cols ...field.Expr) *ordertabDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o ordertabDo) Omit(cols ...field.Expr) *ordertabDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o ordertabDo) Join(table schema.Tabler, on ...field.Expr) *ordertabDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o ordertabDo) LeftJoin(table schema.Tabler, on ...field.Expr) *ordertabDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o ordertabDo) RightJoin(table schema.Tabler, on ...field.Expr) *ordertabDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o ordertabDo) Group(cols ...field.Expr) *ordertabDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o ordertabDo) Having(conds ...gen.Condition) *ordertabDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o ordertabDo) Limit(limit int) *ordertabDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o ordertabDo) Offset(offset int) *ordertabDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o ordertabDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *ordertabDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o ordertabDo) Unscoped() *ordertabDo {
	return o.withDO(o.DO.Unscoped())
}

func (o ordertabDo) Create(values ...*model.Ordertab) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o ordertabDo) CreateInBatches(values []*model.Ordertab, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o ordertabDo) Save(values ...*model.Ordertab) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o ordertabDo) First() (*model.Ordertab, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ordertab), nil
	}
}

func (o ordertabDo) Take() (*model.Ordertab, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ordertab), nil
	}
}

func (o ordertabDo) Last() (*model.Ordertab, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ordertab), nil
	}
}

func (o ordertabDo) Find() ([]*model.Ordertab, error) {
	result, err := o.DO.Find()
	return result.([]*model.Ordertab), err
}

func (o ordertabDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Ordertab, err error) {
	buf := make([]*model.Ordertab, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o ordertabDo) FindInBatches(result *[]*model.Ordertab, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o ordertabDo) Attrs(attrs ...field.AssignExpr) *ordertabDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o ordertabDo) Assign(attrs ...field.AssignExpr) *ordertabDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o ordertabDo) Joins(fields ...field.RelationField) *ordertabDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o ordertabDo) Preload(fields ...field.RelationField) *ordertabDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o ordertabDo) FirstOrInit() (*model.Ordertab, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ordertab), nil
	}
}

func (o ordertabDo) FirstOrCreate() (*model.Ordertab, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ordertab), nil
	}
}

func (o ordertabDo) FindByPage(offset int, limit int) (result []*model.Ordertab, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o ordertabDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o ordertabDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o ordertabDo) Delete(models ...*model.Ordertab) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *ordertabDo) withDO(do gen.Dao) *ordertabDo {
	o.DO = *do.(*gen.DO)
	return o
}
